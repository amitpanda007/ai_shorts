import streamlit as st
import os
from main import main_workflow, USE_OPENAI, OLLAMA_ENABLED, OLLAMA_MODEL

st.set_page_config(page_title="Auto Video Clipper", layout="wide")

st.title("🤖 Auto Video Clipper & Subtitler")
st.markdown("""
    This app takes a video, transcribes it, finds the most engaging parts using AI,
    and automatically generates short, subtitled clips perfect for social media.
""")

# --- AI Backend Status ---
with st.expander("AI Backend Status", expanded=True):
    if USE_OPENAI:
        st.info("✅ **Using OpenAI API:** An API key was found. Highlights will be generated by GPT.")
    elif OLLAMA_ENABLED:
        st.success(
            f"✅ **Using Ollama:** Your local Ollama server is active. Highlights will be generated by the `{OLLAMA_MODEL}` model.")
    else:
        st.warning(
            "⚠️ **No AI Service Found:** Neither an OpenAI key nor an active Ollama server was detected. Please configure one to proceed.")

# --- User Inputs ---
with st.container(border=True):
    st.subheader("1. Select Video Source")

    # ### MODIFICATION: Add Radio button to choose input type ###
    input_type = st.radio("Choose your video source:", ("YouTube URL", "Local Video File"), horizontal=True)

    input_source = None

    if input_type == "YouTube URL":
        youtube_url = st.text_input("Enter YouTube Video URL", placeholder="https://www.youtube.com/watch?v=...")
        if youtube_url:
            input_source = youtube_url
    else:  # Local Video File
        uploaded_file = st.file_uploader("Upload a video file", type=['mp4', 'mov', 'avi', 'mkv'])
        if uploaded_file is not None:
            # To process a local file, we must save it to a temporary path first.
            # The 'output' directory is a convenient place.
            temp_path = os.path.join("output", uploaded_file.name)
            with open(temp_path, "wb") as f:
                f.write(uploaded_file.getbuffer())
            input_source = temp_path
            st.info(f"File '{uploaded_file.name}' uploaded and ready for processing from the `output` folder.")

    st.subheader("2. Configure Clips")
    col1, col2, col3 = st.columns(3)
    with col1:
        num_clips = st.slider("Number of clips to generate", 1, 10, 3)
    with col2:
        min_duration = st.slider("Minimum clip length (seconds)", 15, 90, 30)
    with col3:
        max_duration = st.slider("Maximum clip length (seconds)", 30, 180, 60)

    if min_duration > max_duration:
        st.error("Minimum duration cannot be greater than maximum duration.")

# --- Generate Button ---
if st.button("🚀 Generate Clips", type="primary", use_container_width=True, disabled=(min_duration > max_duration)):
    # ### MODIFICATION: Check the generic `input_source` variable ###
    if not input_source:
        st.error("Please provide a YouTube URL or upload a local file to begin.")
    elif not (USE_OPENAI or OLLAMA_ENABLED):
        st.error("Cannot generate clips without a configured AI service (OpenAI or Ollama).")
    else:
        try:
            with st.spinner("Processing... This might take a few minutes depending on video length."):
                main_workflow(input_source, num_clips, min_duration, max_duration)

            st.success("🎉 All clips have been generated successfully!")
            st.balloons()

            st.markdown("### Generated Clips:")
            # List the generated files
            output_files = [f for f in os.listdir("output") if f.endswith('.mp4') and '_clip_' in f]
            for file in sorted(output_files):
                st.video(os.path.join("output", file))

        except Exception as e:
            st.error(f"An error occurred: {e}")
            st.exception(e)